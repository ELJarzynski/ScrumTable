before_script:
  - apk update && apk add --no-cache gcc libffi-dev postgresql-dev musl-dev bash curl
  - curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
  - chmod +x /usr/local/bin/docker-compose

stages:
  - build
  - test
  - deploy

build_backend:
  stage: build
  image: docker:20.10.23  # Zamiast python:3.12-alpine, używamy obrazu Docker'a, który zawiera docker-compose
  services:
    - docker:dind
  script:
    - docker-compose -f ../backend/docker-compose.yml build web


build_frontend:
  stage: build
  image: docker:20.10.23  # Zamiast python:3.12-alpine, używamy obrazu Docker'a, który zawiera docker-compose
  script:
    - docker-compose -f ../frontend/docker-compose.yml build frontend



# Etap testowania backendu
test_backend:
  stage: test
  image: python:3.12-alpine  # Obraz Alpine dla backendu
  services:
    - docker:dind  # Docker-in-Docker do uruchamiania kontenerów
  script:
    - docker-compose -f ../backend/docker-compose.yml run web python manage.py test  # Uruchomienie testów

# Etap testowania frontendu
test_frontend:
  stage: test
  image: node:16-alpine  # Obraz Alpine dla frontendu
  script:
    - docker-compose -f ../frontend/docker-compose.yml run frontend npm run test  # Uruchomienie testów frontendu

# Etap deploymentu
deploy:
  stage: deploy
  script:
    - echo "Deployment steps here"  # Możesz dodać tu kroki związane z deploymentem
