# Wspólne kroki przed każdym zadaniem
before_script:
  - apk update && apk add --no-cache gcc libffi-dev postgresql-dev musl-dev bash curl
  - curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r .tag_name)/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
  - chmod +x /usr/local/bin/docker-compose  # Ustawienie praw do uruchamiania

stages:
  - build
  - test
  - deploy

# Etap budowania backendu
build_backend:
  stage: build
  image: python:3.12-alpine  # Obraz Alpine dla backendu
  services:
    - docker:dind  # Aby umożliwić Docker-in-Docker
  script:
    - docker-compose -f ../backend/docker-compose.yml build web  # Budowanie backendu

# Etap budowania frontendu
build_frontend:
  stage: build
  image: node:16-alpine  # Obraz Alpine dla frontendu
  script:
    - docker-compose -f ../frontend/docker-compose.yml build frontend  # Budowanie frontendu

# Etap testowania backendu
test_backend:
  stage: test
  image: python:3.12-alpine  # Obraz Alpine dla backendu
  services:
    - docker:dind  # Docker-in-Docker do uruchamiania kontenerów
  script:
    - docker-compose -f ../backend/docker-compose.yml run web python manage.py test  # Uruchomienie testów

# Etap testowania frontendu
test_frontend:
  stage: test
  image: node:16-alpine  # Obraz Alpine dla frontendu
  script:
    - docker-compose -f ../frontend/docker-compose.yml run frontend npm run test  # Uruchomienie testów frontendu

# Etap deploymentu
deploy:
  stage: deploy
  script:
    - echo "Deployment steps here"  # Możesz dodać tu kroki związane z deploymentem
